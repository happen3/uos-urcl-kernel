// This should be put in the kernel's .lscp

.lscp // low code space (OS)
.r
.c10 // uos
    OUT 1 'U'
    OUT 1 'O'
    OUT 1 'S'
    OUT 1 ' '
    JMP .c11
    OUT 1 '\n'
    JMP .ial1
HLT // halt if something goes wrong
.ial1 // Initialize all
    OUT 1 '>'
    IMM @counter -1 // Make sure we end up at 0 in the counter when INCing it
    IMM r1 0 // Initialize r1 to ensure that r1 is clean
    IMM r2 0 // ensure r2 is clean
    IMM r3 0 // ensure r3 is clean as well
    JMP .exe1 // then jump to input handler
HLT // halt if something goes wrong
.exe1 // Execute 1
    IMM @return_address ~+2 // return address to *
    JMP .fn_g1 // FAR JUMP to UOS function 1 sector GENERAL: getch_echo
    IMM r1 @function_return
    BRE .pce0 r1 '\n' // if \n then jump to command parser; * here
    ADD @counter @counter 1 // add 1 to the counter register
    STR @counter r1 // we also store the key at the address specified by the counter
    MOV @command_length @counter // for covinience
    ADD @command_length_with_terminator @command_length 1
.exe1p // segment p of exe1
    JMP .exe1
.exe1p2 // end of command parsing
    OUT 1 '>'
    IMM @command_length 0 // reset the command length
    IMM @command_length_with_terminator 0 // reset cmd length w/ terminator
    IMM @counter -1 // reset the counter
    IMM @return_address ~+2 // *
    JMP .fn_m2 // DONT FORGET TO RESET AFTER INPUT
    JMP .exe1p // * this will arrive here
.pce0 // command parser
    IMM @counter 0 // reset the counter
    LOD r32 @counter // load the character into r32
    BRE ~+2 r32 'm' // if r32 (loaded char) is m, jump to the second next instruction
    JMP .echo_match // else, jump to echo matching
    ADD @counter @counter 1 // increment the counter
    LOD r32 @counter // and so on
    BRE ~+2 r32 'e'
    JMP .echo_match
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 'm'
    JMP .echo_match
    ADD @counter @counter 1
    LOD r32 @counter
    SETE r30 @command_length 2
    BRE .mem_command r30 0xFFFF // if the result of the SETE is 255, go to the mem command
.echo_match // match for echo?
    IMM @counter 0
    LOD r32 @counter
    BRE ~+2 r32 'e'
    JMP .match_psi
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 'c'
    JMP .match_psi
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 'h'
    JMP .match_psi
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 'o'
    JMP .match_psi
    ADD @counter @counter 1
    LOD r32 @counter
    BRE .echo_command r32 ' '
    BRE .echonl_command r32 '.'
    JMP .match_psi
.match_psi
    IMM @counter 0
    LOD r32 @counter
    BRE ~+2 r32 'p'
    JMP .invalid
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 's'
    JMP .invalid
    ADD @counter @counter 1
    LOD r32 @counter
    BRE ~+2 r32 'i'
    JMP .invalid
    ADD @counter @counter 1
    LOD r32 @counter
    BRE .psi_commmand r32 ' '
    JMP .invalid
.echo_command
    IMM @return_address .exe1nl // set the return address of the function to be the end of the parsing
    ADD @counter @counter 1 // increment the counter by 2 to avoid spaces
    JMP .fn_v0 // FAR JUMP to UOS function 0 sector VIDEO SERVICES (print)
.echonl_command
    JMP .exe1nl // just outputs \n, sufficient for the needs
.mem_command
    // prints 'Conventional memory: 100 bytes'
    OUT 1 'C'
    OUT 1 'o'
    OUT 1 'v'
    OUT 1 'e'
    OUT 1 'n'
    OUT 1 't'
    OUT 1 'i'
    OUT 1 'o'
    OUT 1 'n'
    OUT 1 'a'
    OUT 1 'l'
    OUT 1 ' '
    OUT 1 'm'
    OUT 1 'e'
    OUT 1 'm'
    OUT 1 'o'
    OUT 1 'r'
    OUT 1 'y'
    OUT 1 ':'
    OUT 1 ' '
    OUT 2 100
    OUT 1 ' '
    OUT 1 'b'
    OUT 1 'y'
    OUT 1 't'
    OUT 1 'e'
    OUT 1 's'
    OUT 1 '\n'
    IMM @function_return 0 // reset the function return
    IMM @return_address ~+2 // set the return address to the instruction after the next
    JMP .fn_m1 // FAR JUMP to UOS function 1 sector MEMORY (getfree)
    OUT 1 'F' // prints 'Free memory: %i bytes'
    OUT 1 'r'
    OUT 1 'e'
    OUT 1 'e'
    OUT 1 ' '
    OUT 1 'm'
    OUT 1 'e'
    OUT 1 'm'
    OUT 1 'o'
    OUT 1 'r'
    OUT 1 'y'
    OUT 1 ':'
    OUT 1 ' '
    OUT 2 @function_return
    OUT 1 ' '
    OUT 1 'b'
    OUT 1 'y'
    OUT 1 't'
    OUT 1 'e'
    OUT 1 's'
    OUT 1 '\n'
    // prints 'Reserved memory: %i bytes'
    OUT 1 'R'
    OUT 1 'e'
    OUT 1 's'
    OUT 1 'e'
    OUT 1 'r'
    OUT 1 'v'
    OUT 1 'e'
    OUT 1 'd'
    OUT 1 ' '
    OUT 1 'm'
    OUT 1 'e'
    OUT 1 'm'
    OUT 1 'o'
    OUT 1 'r'
    OUT 1 'y'
    OUT 1 ':'
    OUT 1 ' '
    OUT 2 @max_print
    OUT 1 ' '
    OUT 1 'b'
    OUT 1 'y'
    OUT 1 't'
    OUT 1 'e'
    OUT 1 's'
    JMP .exe1nl
.psi_commmand
    ADD @counter @counter 1 // increment the counter by 2 to avoid spaces
    LOD r32 @counter
    PSH r32
    IMM @return_address ~+2 // set the return address of the function to be the end of the parsing
    JMP .fn_g3 // FAR JUMP to UOS function 3 sector GENERAL (parseint)
    BRE .psi_command_illegal_character @function_return 127
    OUT 2 @function_return
    IMM @function_return 0
    JMP .exe1nl
    .psi_command_illegal_character
        OUT 1 'I'
        OUT 1 'l'
        OUT 1 'l'
        OUT 1 'e'
        OUT 1 'g'
        OUT 1 'a'
        OUT 1 'l'
        OUT 1 ' '
        OUT 1 'c'
        OUT 1 'h'
        OUT 1 'a'
        OUT 1 'r'
        OUT 1 'a'
        OUT 1 'c'
        OUT 1 't'
        OUT 1 'e'
        OUT 1 'r'
        OUT 1 ' '
        OUT 1 'f'
        OUT 1 'o'
        OUT 1 'r'
        OUT 1 ' '
        OUT 1 'p'
        OUT 1 'a'
        OUT 1 'r'
        OUT 1 's'
        OUT 1 'e'
        OUT 1 'i'
        OUT 1 'n'
        OUT 1 't'
        OUT 1 '.'
        JMP .exe1nl
.exe1nl
    OUT 1 '\n'
    JMP .exe1p2
.invalid
    // prints 'Invalid Command.'
    OUT 1 'I'
    OUT 1 'n'
    OUT 1 'v'
    OUT 1 'a'
    OUT 1 'l'
    OUT 1 'i'
    OUT 1 'd'
    OUT 1 ' '
    OUT 1 'c'
    OUT 1 'o'
    OUT 1 'm'
    OUT 1 'm'
    OUT 1 'a'
    OUT 1 'n'
    OUT 1 'd'
    OUT 1 '.'
    OUT 1 '\n'
    IMM @return_address .exe1p2 // set return address to begin of command input
    JMP .fn_m1 // FAR JUMP to UOS function 1 sector MEMORY: free_input
